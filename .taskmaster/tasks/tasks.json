{
  "version": "1.0.0",
  "metadata": {
    "created": "2025-08-27",
    "project": "GuessOps - AWS Cloud Game Booth",
    "description": "Interactive poem-based AWS guessing game for community events"
  },
  "tags": {
    "master": {
      "description": "Main development branch for GuessOps",
      "metadata": {
        "created": "2025-08-27",
        "lastModified": "2025-08-27"
      },
      "tasks": [
        {
          "id": "1",
          "title": "Build TV-Friendly Game Interface",
          "description": "Create the main game screen with fullscreen layout, large fonts, and TV-optimized design for 50+ inch displays",
          "status": "pending",
          "priority": "high",
          "difficulty": 8,
          "estimatedHours": 16,
          "tags": ["ui", "tv-display", "game-screen"],
          "dependencies": [],
          "details": "Design and implement the primary game interface that will be displayed on large TV screens at the booth. Must include: fullscreen layout, large fonts (â‰¥36px for poems, 48px for answers), dark theme with high contrast, responsive design for various screen sizes, and accessibility considerations.",
          "testStrategy": "Test on multiple screen sizes including 50+ inch displays, verify readability from 6+ feet away, test color contrast ratios",
          "subtasks": []
        },
        {
          "id": "2", 
          "title": "Implement Moderator Control Panel",
          "description": "Build the moderator interface with game controls (Next, Reveal, Skip) and settings (language, difficulty, timer)",
          "status": "pending",
          "priority": "high", 
          "difficulty": 7,
          "estimatedHours": 12,
          "tags": ["ui", "controls", "moderator"],
          "dependencies": ["1"],
          "details": "Create a separate moderator control panel that can run on a laptop/tablet. Include: Next/Reveal/Skip buttons, language toggle (EN/HI/GU), difficulty selector (Easy/Medium/Hard), timer controls (+/-), fuzzy guess input field, session statistics display.",
          "testStrategy": "Test all control interactions, verify state synchronization with main display, test on tablet and laptop screens",
          "subtasks": []
        },
        {
          "id": "3",
          "title": "Build Timer System with Visual Feedback", 
          "description": "Implement configurable countdown timer with visual animations and timeout handling",
          "status": "pending",
          "priority": "high",
          "difficulty": 6,
          "estimatedHours": 8,
          "tags": ["timer", "animation", "game-logic"],
          "dependencies": ["1"],
          "details": "Create a robust timer system with: configurable duration (15s-60s), visual countdown animation (ring or progress bar), 'Time's up!' message display, auto-reveal functionality after timeout, pause/resume capabilities for moderator.",
          "testStrategy": "Test timer accuracy, verify animations are smooth, test timeout behavior, verify timer controls work correctly",
          "subtasks": []
        },
        {
          "id": "4",
          "title": "Integrate Text-to-Speech for Poem Narration",
          "description": "Implement Web Speech API with Indian English accent for automatic poem reading",
          "status": "pending", 
          "priority": "medium",
          "difficulty": 5,
          "estimatedHours": 6,
          "tags": ["tts", "audio", "accessibility"],
          "dependencies": ["1"],
          "details": "Integrate text-to-speech functionality using Web Speech API with en-IN voice preference. Include: automatic narration when poem loads, mute/unmute toggle for moderator, speed control options, fallback to default voice if en-IN unavailable, optional AWS Polly integration for higher quality.",
          "testStrategy": "Test voice quality and pronunciation, verify controls work correctly, test on different browsers, verify fallback behavior",
          "subtasks": []
        },
        {
          "id": "5",
          "title": "Implement Fuzzy Answer Matching System",
          "description": "Build intelligent guess matching with closeness feedback (Very Close/Close/Not Close)",
          "status": "pending",
          "priority": "medium", 
          "difficulty": 6,
          "estimatedHours": 8,
          "tags": ["algorithm", "matching", "game-logic"],
          "dependencies": ["2"],
          "details": "Create a fuzzy matching algorithm that compares visitor guesses to correct answers. Include: string similarity algorithm (Levenshtein distance or similar), closeness categories (Very Close/Close/Not Close), real-time feedback as moderator types, handling of common variations and abbreviations, AWS service name normalization.",
          "testStrategy": "Test with various guess inputs, verify accuracy of closeness detection, test edge cases and abbreviations",
          "subtasks": []
        },
        {
          "id": "6",
          "title": "Build Game State Management System",
          "description": "Implement comprehensive state management for game flow, settings, and session data",
          "status": "pending",
          "priority": "high",
          "difficulty": 7,
          "estimatedHours": 10,
          "tags": ["state-management", "game-flow", "architecture"],
          "dependencies": ["1", "2"],
          "details": "Create a robust state management system using React Context or Zustand. Include: game states (setup, playing, revealed, timeout), settings persistence (language, difficulty, timer), session tracking (questions asked, time spent), question history to avoid repeats, error state handling.",
          "testStrategy": "Test state transitions, verify persistence across page refreshes, test error recovery, verify no duplicate questions",
          "subtasks": []
        },
        {
          "id": "7",
          "title": "Add Smooth Animations and Visual Effects",
          "description": "Implement engaging animations for poem display, timer, and reveal effects",
          "status": "pending",
          "priority": "low",
          "difficulty": 4,
          "estimatedHours": 6,
          "tags": ["animation", "polish", "ux"],
          "dependencies": ["1", "3"],
          "details": "Add polished animations using Framer Motion or CSS animations. Include: poem fade-in with stagger effect, timer ring countdown animation, reveal effect with highlight and scale, success celebration animations, smooth transitions between game states, loading animations for question generation.",
          "testStrategy": "Test animation performance on large displays, verify animations don't interfere with readability, test on lower-end devices",
          "subtasks": []
        },
        {
          "id": "8",
          "title": "Implement Offline Support with Caching",
          "description": "Add service worker and IndexedDB caching for offline functionality",
          "status": "pending",
          "priority": "medium",
          "difficulty": 6,
          "estimatedHours": 8,
          "tags": ["offline", "pwa", "caching"],
          "dependencies": ["6"],
          "details": "Implement comprehensive offline support. Include: service worker for caching static assets, IndexedDB for storing generated questions, offline-first architecture, cache management and updates, fallback to static questions when offline, network status detection and user feedback.",
          "testStrategy": "Test offline functionality, verify cache updates, test cache size limits, verify fallback behavior",
          "subtasks": []
        },
        {
          "id": "9",
          "title": "Create Settings and Configuration Panel",
          "description": "Build admin interface for game configuration and API key management",
          "status": "pending",
          "priority": "medium",
          "difficulty": 5,
          "estimatedHours": 6,
          "tags": ["admin", "settings", "configuration"],
          "dependencies": ["2"],
          "details": "Create an admin settings panel for game configuration. Include: LLM provider selection (OpenAI/Bedrock), model selection and configuration, API key management interface, timer duration presets, language and difficulty defaults, question bank management, session statistics and analytics.",
          "testStrategy": "Test all configuration options, verify settings persistence, test API key validation, verify security of sensitive data",
          "subtasks": []
        },
        {
          "id": "10",
          "title": "Optimize for Large Screen Displays",
          "description": "Test and optimize UI for 50+ inch displays and booth environment",
          "status": "pending",
          "priority": "medium",
          "difficulty": 4,
          "estimatedHours": 4,
          "tags": ["optimization", "display", "testing"],
          "dependencies": ["1", "7"],
          "details": "Optimize the application specifically for large display environments. Include: font size and spacing adjustments, color contrast optimization for bright booth lighting, viewing distance considerations (6+ feet), performance optimization for large displays, browser compatibility testing, kiosk mode setup.",
          "testStrategy": "Test on actual 50+ inch displays, verify readability from various distances, test in bright lighting conditions",
          "subtasks": []
        },
        {
          "id": "11",
          "title": "Deploy to AWS Amplify",
          "description": "Set up production deployment on AWS Amplify with proper configuration",
          "status": "pending",
          "priority": "medium",
          "difficulty": 5,
          "estimatedHours": 6,
          "tags": ["deployment", "aws", "production"],
          "dependencies": ["8", "9"],
          "details": "Deploy the application to AWS Amplify for production use. Include: Amplify hosting configuration, environment variable setup, build optimization, custom domain configuration, SSL certificate setup, CI/CD pipeline configuration, monitoring and logging setup.",
          "testStrategy": "Test deployment pipeline, verify environment variables, test production performance, verify SSL and domain setup",
          "subtasks": []
        },
        {
          "id": "12",
          "title": "Add AWS Cognito Authentication (Optional)",
          "description": "Implement admin authentication using AWS Cognito and Google sign-in",
          "status": "pending",
          "priority": "low",
          "difficulty": 6,
          "estimatedHours": 8,
          "tags": ["auth", "security", "aws"],
          "dependencies": ["9"],
          "details": "Add optional authentication for admin access to settings and configuration. Include: AWS Cognito user pool setup, Google sign-in integration, admin role management, protected routes for settings, session management, logout functionality.",
          "testStrategy": "Test authentication flow, verify protected routes, test session management, verify Google sign-in integration",
          "subtasks": []
        },
        {
          "id": "13",
          "title": "Enhance Question Bank with More Content",
          "description": "Expand static question bank with additional AWS services and languages",
          "status": "pending",
          "priority": "low",
          "difficulty": 3,
          "estimatedHours": 4,
          "tags": ["content", "questions", "localization"],
          "dependencies": [],
          "details": "Expand the existing question bank with more comprehensive coverage. Include: additional AWS services (50+ services), more questions per difficulty level, improved Hindi and Gujarati translations, quality review and testing of all questions, categorization by AWS service types.",
          "testStrategy": "Review all questions for accuracy, test translations with native speakers, verify technical accuracy of explanations",
          "subtasks": []
        },
        {
          "id": "14",
          "title": "Add Session Analytics and Reporting",
          "description": "Implement analytics to track game sessions and booth engagement",
          "status": "pending",
          "priority": "low",
          "difficulty": 4,
          "estimatedHours": 5,
          "tags": ["analytics", "reporting", "metrics"],
          "dependencies": ["6"],
          "details": "Add analytics to measure booth engagement and game effectiveness. Include: session duration tracking, questions asked per session, language and difficulty preferences, success rate metrics, daily/hourly usage patterns, export functionality for event reports.",
          "testStrategy": "Verify data collection accuracy, test export functionality, verify privacy compliance, test data visualization",
          "subtasks": []
        },
        {
          "id": "15",
          "title": "Create Booth Setup and Operation Guide",
          "description": "Document complete setup process and operational procedures for event staff",
          "status": "pending",
          "priority": "medium",
          "difficulty": 2,
          "estimatedHours": 3,
          "tags": ["documentation", "operations", "setup"],
          "dependencies": ["10", "11"],
          "details": "Create comprehensive documentation for booth setup and operation. Include: hardware setup instructions, software configuration guide, troubleshooting common issues, moderator training materials, event day checklist, emergency contact information and backup procedures.",
          "testStrategy": "Test setup guide with new users, verify all procedures work correctly, gather feedback from practice sessions",
          "subtasks": []
        }
      ]
    }
  }
}
